
#include "main.h"
#include "config.h"

#define Delay_500MS 500

const char *TAG = "MAIN";
volatile uint16_t data;     // lectura del ADC en el instante actual
volatile uint32_t data_max; // lectura máxima del ADC registrada

/*******************************************************************************
 Programa principal
******************************************************************************/
void app_main(void)
{
  // Declaración de variables
  char config_ssid[32];
  char config_pass[64];
  char config_broker_mqtt[32];
  char config_delay[16];
  char config_msg[128];
  int  data_delay;
  char timestamp[64]="";
    
  int N = 50;
  int n;
  int64_t epochs[N];        //array de largo 20 para los epochs
  int8_t rssi[N];           // array de largo 20 para lecturas de RSSI

  // Definición de umbrales
  int umbral0 = (int)(SENSOR_REP + (SENSOR_MAX-SENSOR_REP)/6.0);
  int umbral1 = (int)(SENSOR_REP + (SENSOR_MAX-SENSOR_REP)/3.0);
  int umbral2 = (int)(SENSOR_REP + (SENSOR_MAX-SENSOR_REP)/4.0*3);

  // Inicializaciones

  // Use POSIX and C standard library functions to work with files.
  SD_mount();
  IO_adcInit();
  CRONO_timerInit();

  CRONO_timerStart(10);

  FILE * f = SD_open("config.txt", "r");        // Archivo para lectura
  FILE * f1 = SD_open("lecturas.csv", "w");     // Archivo para escritura

  SD_gets(f, config_ssid, sizeof(config_ssid));
  SD_gets(f, config_pass, sizeof(config_pass));
  SD_gets(f, config_broker_mqtt, sizeof(config_broker_mqtt));
  SD_gets(f, config_delay, sizeof(config_delay));
  SD_gets(f, config_msg, sizeof(config_msg));

  // Verificación de lo leido
  ESP_LOGI(TAG,"ssid --> %s", config_ssid);
  ESP_LOGI(TAG,"pass --> %s", config_pass);
  ESP_LOGI(TAG,"broker_mqtt --> %s", config_broker_mqtt);
  ESP_LOGI(TAG,"delay --> %s", config_delay);
  ESP_LOGI(TAG,"msg --> %s", config_msg);

  data_delay=atoi(config_delay);
  ESP_LOGI(TAG,"delay --> %d ms", data_delay);

  SD_close(f);
  
  // Inicializo red y MQTT
  WIFI_userInit(config_ssid, config_pass);
  MQTT_userInit(config_broker_mqtt);

  // Inicializo SNPT
  CRONO_sntpInit();

  // Ciclo de lectura-Encabezado
  SD_printf(f1, "Epoch [s], RSSI [dBm]\n");
  for(n=0;n<N;n++){
    epochs[n]= CRONO_getTime(timestamp, sizeof(timestamp));
    rssi[n]=WIFI_getRSSI();
    SD_printf(f1, "%lli,%i\n", epochs[n], rssi[n]);
    ESP_LOGI(TAG,"N=%2d  -->Time stamp=%lli -- > RSSI=%i ",n, epochs[n],rssi[n]);
    CRONO_delayMs(data_delay);
  }
  
  fclose(f1);
 
  n=0;
  while(1){
    CRONO_delayMs(Delay_500MS);
    
      if(umbral0<fabs(data_max) && fabs(data_max)<umbral1){
        printf("ATENCIÓN \t%i\n", data_max);
        MQTT_publish("test/alarmas","0");
        }
      else if(umbral1<fabs(data_max) && fabs(data_max)<umbral2){
        printf("PRECAUCIÓN \t%i\n", data_max);
        MQTT_publish("test/alarmas","1");
      }
      else if(fabs(data_max)>umbral2){
        printf("ALERTA! \t%i\n", data_max);
        MQTT_publish("test/alarmas","2");
      }
      else{
        printf("REPOSO .... \n");
        MQTT_publish("test/alarmas","4");
      }
      data_max=0;

    //ESP_LOGI(TAG,"FIN del Archivo, se escribieron %d datos, contador=%d ", N,n);
    //n++;
  }

  // All done, unmount partition and disable SDMMC or SPI peripheral
  SD_unmount();

}
